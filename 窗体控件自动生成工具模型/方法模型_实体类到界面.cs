using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using 实体类;
using 工具;

namespace 窗体控件自动生成工具模型
{
    public class 方法模型_实体类到界面
    {
        public static string 创建(表结构 表结构实体)
        {
            string 结果 = "";

            结果 = 结果 + 符号类.制表符号(2) + "" + 符号类.换行符号(1);
            结果 = 结果 + 符号类.制表符号(2) + "/// <summary>" + 符号类.换行符号(1);
            结果 = 结果 + 符号类.制表符号(2) + "/// 将实体类中的内容输出到页面上 " + 符号类.换行符号(1);
            结果 = 结果 + 符号类.制表符号(2) + "/// </summary>" + 符号类.换行符号(1);
            结果 = 结果 + 符号类.制表符号(2) + "/// <param name="+符号类.双引符号(1)+ "yjentity" + 符号类.双引符号(1) + "></param>" + 符号类.换行符号(1);
            结果 = 结果 + 符号类.制表符号(2) + "void EntityToPage("+ 表结构实体.ClassName+ " yjentity)" + 符号类.换行符号(1);
            结果 = 结果 + 符号类.制表符号(2) + "{" + 符号类.换行符号(1);
            for(int i=0;i< 表结构实体.字段列表.Rows.Count; i++)
            {
                结果 = 结果 + 符号类.制表符号(3) 
                    + "txt_" + 表结构实体.字段列表.Rows[i]["字段名"].ToString() + ".Text = yjentity."+ 表结构实体.字段列表.Rows[i]["字段名"].ToString()+";"

                    + 符号类.换行符号(1);
            }

            
            结果 = 结果 + 符号类.制表符号(2) + "" + 符号类.换行符号(1);
            结果 = 结果 + 符号类.制表符号(2) + "" + 符号类.换行符号(1);
            结果 = 结果 + 符号类.制表符号(2) + "}" + 符号类.换行符号(1);
            结果 = 结果 + 符号类.制表符号(2) + "" + 符号类.换行符号(1);

            return 结果;
        }
    }
}
