using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using 字符串操作;
using 实体类;
using 工具;

namespace 实体类转Csharp
{
    public class Csharp实体模板
    {
        public static string Conversion(表结构 表结构实例)
        {
            string str = 头文件.HeadTXT();

            str = str + 符号类.制表符号(0) + "/// <summary>" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(0) + "/// 实体类默认是在 Entity 命名空间下的"  + 符号类.换行符号(1);
            str = str + 符号类.制表符号(0) + "/// </summary>" + 符号类.换行符号(1);


            str = str + 符号类.制表符号(0) + "namespace " + 表结构实例.NameSpace + 符号类.换行符号(1);
            str = str + 符号类.制表符号(0) + "{" + 符号类.换行符号(1);

            str = str + 符号类.制表符号(1) + "/// <summary>" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(1) + "/// " + 表结构实例.ClassNotes + 符号类.换行符号(1);
            str = str + 符号类.制表符号(1) + "/// </summary>" + 符号类.换行符号(1);

            str = str + 符号类.制表符号(1) + "public class " + 表结构实例.ClassName + 符号类.换行符号(1);
            str = str + 符号类.制表符号(1) + "{" + 符号类.换行符号(1);


            //=========================================================================================================
            //生成 成员变量
            //=========================================================================================================
            for (int i=0;i< 表结构实例.字段列表.Rows.Count; i++)
            {
                str = str + 符号类.制表符号(2) + "/// <summary>" + 符号类.换行符号(1);
                str = str + 符号类.制表符号(2) + "/// " 
                    + 表结构实例.字段列表.Rows[i]["字段注释"].ToString() + " " 
                    + 表结构实例.字段列表.Rows[i]["字段类型"].ToString()
                    + 符号类.换行符号(1);
                str = str + 符号类.制表符号(2) + "/// </summary>" + 符号类.换行符号(1);
                str = str + 符号类.制表符号(2) + "public string " + 表结构实例.字段列表.Rows[i]["字段名"].ToString() + " = \"\";" + 符号类.换行符号(2);
            }
            //=========================================================================================================
            //生成空的构造方法
            //=========================================================================================================
            str = str + 符号类.制表符号(2) + "/// <summary>" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "/// 构造方法：普通的构造方法，什么也不做" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "/// </summary>" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "public "+ 表结构实例.ClassName + "()" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "{" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "}" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "" + 符号类.换行符号(1);

            //=========================================================================================================
            //生成用DataRow的构造方法
            //=========================================================================================================
            str = str + 符号类.制表符号(2) + "/// <summary>" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "/// 构造方法：传入一行数据，实例化对象。如果转换失败，为id赋值为error" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "/// </summary>" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "/// <param name=\"dataRow\"></param>" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "public "+ 表结构实例.ClassName + "(DataRow dataRow)" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "{" + 符号类.换行符号(1);


            str = str + 符号类.制表符号(3) + "try" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(3) + "{" + 符号类.换行符号(1);
            for(int i=0;i< 表结构实例.字段列表.Rows.Count; i++)
            {
                str = str + 符号类.制表符号(4) 
                    +"// "
                    + 表结构实例.字段列表.Rows[i]["字段注释"].ToString()
                    + "_"
                    + 表结构实例.字段列表.Rows[i]["字段类型"].ToString()
                    + 符号类.换行符号(1);

                str = str + 符号类.制表符号(4)
                    + 表结构实例.字段列表.Rows[i]["字段名"].ToString()
                    + " = dataRow[\""+ 表结构实例.字段列表.Rows[i]["字段名"].ToString() + "\"].ToString();"
                    + 符号类.换行符号(1);
            }


            str = str + 符号类.制表符号(3) + "}" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(3) + "catch" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(3) + "{" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(4) + "id = \"error\";" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(3) + "}" + 符号类.换行符号(1);


            str = str + 符号类.制表符号(2) + "}" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "" + 符号类.换行符号(1);

            //=========================================================================================================
            //生成用Json字符串的构造方法
            //=========================================================================================================
            str = str + 符号类.制表符号(2) + "/// <summary>" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "/// 构造方法：传入Json字符串，实例化对象。如果转换失败，为id赋值为error" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "/// </summary>" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "/// <param name=\"JsonStr\"></param>" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "public "+ 表结构实例.ClassName + "(string JsonStr)" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "{" + 符号类.换行符号(1);

            str = str + 符号类.制表符号(3) + "//将 字符串 通过 佳轩类库 转换为实体类后，再进行赋值。" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(3) + 表结构实例.ClassName + " Entity = JXJsonToObjetc.FromJSON<" + 表结构实例.ClassName + ">(JsonStr);" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(3) + "if (Entity == null)" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(3) + "{" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(4) + "id = \"error\";" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(3) + "}" + 符号类.换行符号(1);

            for (int i = 0; i < 表结构实例.字段列表.Rows.Count; i++)
            {
                str = str + 符号类.制表符号(4)
                    + "// "
                    + 表结构实例.字段列表.Rows[i]["字段注释"].ToString()
                    + "_"
                    + 表结构实例.字段列表.Rows[i]["字段类型"].ToString()
                    + 符号类.换行符号(1);

                str = str + 符号类.制表符号(4) 
                    + 表结构实例.字段列表.Rows[i]["字段名"].ToString() 
                    + " = Entity."
                    + 表结构实例.字段列表.Rows[i]["字段名"].ToString()
                    + ";"
                    + 符号类.换行符号(1);
            }
            str = str + 符号类.制表符号(3) + "" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(3) + "" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(3) + "" + 符号类.换行符号(1);

            str = str + 符号类.制表符号(2) + "}" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "" + 符号类.换行符号(1);
            //=========================================================================================================
            //生成ToJson方法
            //=========================================================================================================
            str = str + 符号类.制表符号(2) + "/// <summary>" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "/// 将实体类 转换为Json格式的字符串" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "/// </summary>" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "/// <returns></returns>" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "public string ToJson()" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "{" + 符号类.换行符号(1);

            str = str + 符号类.制表符号(3) + "string str = \"\";" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(3) + "str = str + \"{\";" + 符号类.换行符号(1);

            for (int i = 0; i < 表结构实例.字段列表.Rows.Count; i++)
            {
                str = str + 符号类.制表符号(4)
                    + "// "
                    + 表结构实例.字段列表.Rows[i]["字段注释"].ToString()
                    + "_"
                    + 表结构实例.字段列表.Rows[i]["字段类型"].ToString()
                    + 符号类.换行符号(1);

                str = str + 符号类.制表符号(3) 
                    + "str = str + \"'" + 表结构实例.字段列表.Rows[i]["字段名"].ToString() + "':'\" + " 
                    + 表结构实例.字段列表.Rows[i]["字段名"].ToString() + " + \"'\";" + 符号类.换行符号(1);

                if ((表结构实例.字段列表.Rows.Count - 1) != i)
                {
                    str = str + 符号类.制表符号(3) + "str = str + \",\";" + 符号类.换行符号(1);
                }
            }


            str = str + 符号类.制表符号(3) + "str = str + \"}\";" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(3) + "return str;" + 符号类.换行符号(1);

            str = str + 符号类.制表符号(2) + "}" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "" + 符号类.换行符号(1);

            //=========================================================================================================
            //生成ISeeYou方法
            //=========================================================================================================
            str = str + 符号类.制表符号(2) + "/// <summary>" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "/// 默认的实体类展示类ISeeYou" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "/// </summary>" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "/// <returns>返回内容是用于查看和调试实体类内容的</returns>" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "public string ISeeYou(){" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(3) + "return " + 符号类.换行符号(1);
            for (int i = 0; i < 表结构实例.字段列表.Rows.Count; i++)
            {
                str = str + 符号类.制表符号(4)
                    + "\"【" + 表结构实例.字段列表.Rows[i]["字段名"].ToString() + "】"
                    + "是"
                    + "【" + 表结构实例.字段列表.Rows[i]["字段注释"].ToString() + "】"
                    + "值为"
                    + "【\" + " + 表结构实例.字段列表.Rows[i]["字段名"].ToString() + " + \"】\" + "
                    + 符号类.换行符号(1);
            }
            str = str + 符号类.制表符号(4) + "\"\";" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(2) + "}" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(1) + "}" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(0) + "}" + 符号类.换行符号(1);
            str = str + 符号类.制表符号(0) + "" + 符号类.换行符号(1);
            return str;
        }
    }
}
