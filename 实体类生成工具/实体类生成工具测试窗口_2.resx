<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox1.Text" xml:space="preserve">
    <value>--零件订单
CREATE TABLE `JX_t_WMS_Part_Test` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '序号',
  `basic_inv` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '有效性',
  `basic_time` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '时间',
  `b_Part_Code` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '零件编号',
  `b_Patr_Name` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '零件名称',
  `b_Part_Number` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '零件简号',
  `b_Part_Vehicle` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '车型',
  `b_Part_Supplier` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '供应商代码',
  `b_Part_NameSupplier` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '供应商名称',
  `b_Part_Logistics` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '物流模式',
  `b_Part_Packaging` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '是否需要转换包装',
  `b_Pack_Type` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '包装类型',
  `b_Pack_Number` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '包装数',
  `b_Pack_Long` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '长',
  `b_Pack_Width` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '宽',
  `b_Pack_High` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '高',
  `b_Online_Packaging` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '包装类型',
  `b_Online_Long` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '长',
  `b_Online_Width` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '宽',
  `b_Online_High` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '高',
  `b_Online_Number` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '包装数',
  `b_Online_Appliance` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '器具规格',
  `b_Online_Discharge` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '卸货口',
  `b_Stock_length` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '库位长',
  `b_Stock_Width` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '库位宽',
  `b_Stock_Quantity` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '安全库存数量',
  `b_Stock_Number` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '库位可存放数量',
  `b_Stock_Requirement` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '需求库位数',
  `b_Stock_Planning` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '规划库位数',
  `b_Stock_Requirements` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '自由定位需求数',
  `b_Stock_Location` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '自由定位区域',
  `b_Stock_Current` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '当前定位',
  `b_Stock_Adjusted` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '调整后定位',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=687 DEFAULT CHARSET=utf8 COLLATE=utf8_bin ROW_FORMAT=DYNAMIC</value>
  </data>
</root>